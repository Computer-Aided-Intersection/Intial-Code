#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#define VARS 3

void QsortRec(int pos[], float arr[], int first, int last);
int partition(int pos[], float arr[], int first, int last);
void swap(float *a, float *b, int *c, int *d);
int getNumCars();
float calculate_Time(int vda[VARS]);
void set_Randoms(int vda[VARS]);
void set_data(int NumCars, int data[][VARS], int vda[VARS], int i);
//void OutputToTxt(float times[], int pos[]);
void printArray(int num_cars, int data[num_cars][VARS], float time[], int pos[]);

int main(int argc, char *argv[]){ 

	int i; 
	int NumCars = getNumCars();
	float Car_Times[NumCars];
	int Data[NumCars][VARS];
	int vda[VARS];
	int positions[NumCars];
	
	srand(time(0));
	for(i = 0; i < NumCars; i++){
		set_Randoms(vda);
		set_data(NumCars, Data, vda, i);
		Car_Times[i] = calculate_Time(vda);
		positions[i] = i;
	}
	QsortRec(positions, Car_Times, 0, sizeof(Car_Times)/sizeof(Car_Times[0]) - 1);
	printArray(NumCars, Data, Car_Times, positions);
	//OutputToTxt(Car_Times, positions);
}
float calculate_Time(int vda[VARS]){
	int i;
	float v = (float)(vda[0]);
	float d = (float)(vda[1]);
	float a = (float)(vda[2]);

	float x = (-v/a);
	float y = sqrt(v*v-2*a*d*-1)/a; //Calculating time to intersection
	return x + y;
}
void set_data(int NumCars, int data [NumCars][VARS], int vda[VARS], int index){
	data[index][0] = vda[0];
	data[index][1] = vda[1];
	data[index][2] = vda[2];
}
void set_Randoms(int vda[VARS]){
	vda[0] = ((rand() % 25 ) + 25);// puts random velocities in 25-49
	vda[1] =((rand() % 500 ) + 200);// Puts random distances in 200 - 699
	vda[2] = rand()%5 + 5;//Puts random Accelerations 5 - 9
}
int getNumCars(){
	return rand() % 10 + 5;
}
void printArray(int num_cars, int data[num_cars][VARS], float time[], int pos[]){
	int i, j;
	for(i = 0; i < num_cars; i++){
		printf("Car %d: V = %d\tD = %d\tA = %d\tTime = %.2f\n", pos[i], data[i][0], data[i][1], data[i][2], time[i]);
	}
}

/*void OutputToTxt(float times[], int pos[]){
	int i;
	char buff[FILENAME_MAX];
	GetCurrentDir(buff, FILENAME_MAX);
	strcat(buff, "/CarTimes.txt");
	FILE * fp; 
	fp = fopen (buff,"w");
	fprintf(fp, "%d\n", Num_Cars());
	for(i = 0; i < Num_Cars(); i++){
		//fprintf(fp, "%.5f\n", times[i]); //Used for the reading of the txt file
		fprintf(fp, "Car %d Time = %.5f\n",pos[i], times[i]); //Used for us to see better
	}
	fclose (fp);	
}*/
void QsortRec(int pos[], float arr[], int first, int last){
	if(first >= last) return;
	
	int pivotPos = partition(pos, arr, first, last);
	QsortRec(pos, arr, first, pivotPos-1);
	QsortRec(pos, arr, pivotPos + 1, last);
}
int partition(int pos[], float arr[], int first, int last){
	float pivotVal = arr[last];
	int i = first - 1, j = last;
	
	for(int j = first; j <= last - 1; j++){
		
		if(arr[j] < pivotVal){
			i++;
			swap(&arr[i], &arr[j], &pos[i], &pos[j]);
		}
	}
	swap(&arr[i + 1], &arr[last], &pos[i + 1], &pos[last]);
	
	return i+1;
}
void swap(float *a, float *b, int *c, int *d){
	float temp = *a;
	*a = *b;
	*b = temp;
	int temp2 = *c;
	*c = *d;
	*d = temp2;
}
