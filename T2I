#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#define VARS 4
#define DIR 4

enum direction{North, East, South, West};
struct Group{
	int NumCars;
	int **data;
	float *time;
	enum direction d;
};

int partition(float arr[], int *data[VARS], int first, int last, int size);
void swap(float *a, float *b, int c[], int d[], int size);
void QsortRec(int index, int first, int last);
float calculate_Time(int vda[VARS]);
void intializeGroups(int NumCars);
void set_Randoms(int vda[VARS]);
void Set_Data(int size);
void printGroups();
int getNumCars();

const char* directionNames[] = {"North", "East", "South", "West"};
struct Group groups[DIR];

int main(int argc, char *argv[]){ 

	int i; 
	int NumCars = getNumCars();
	int NESW[DIR] = {0,0,0,0};
	
	srand(time(0));
	intializeGroups(NumCars);
	Set_Data(NumCars);
	printf("_________________________________Before_____________________________________\n\n");
	printGroups();
	printf("_________________________________After______________________________________\n\n");
	for(i = 0; i < DIR; i++)
		QsortRec(i, 0, groups[i].NumCars - 1);
	printGroups();
	
	return 0;
}
void Set_Data(int size){
	int NESW[DIR] = {0,0,0,0};
	int vda[VARS];
	int i, j, k;
	for(i = 0; i < size; i++){
		set_Randoms(vda);
		for(j = 0; j < DIR; j++){
			if(vda[3] == j){
				groups[j].time[NESW[j]] = calculate_Time(vda);
				groups[j].d = j;
				for(k = 0; k < VARS; k++){
					groups[j].data[NESW[j]][k] = vda[k];
				}
				NESW[j]++;
				break;
			}
		}
	}
	for(i = 0; i < DIR; i++){
		groups[i].NumCars = NESW[i];
		groups[i].data = (int **)realloc(groups[i].data, NESW[i] * VARS * sizeof(int));
		groups[i].time = (float *)realloc(groups[i].time, NESW[i] * sizeof(float));
	}
}

float calculate_Time(int vda[VARS]){
	float v = (float)(vda[0]);
	float d = (float)(vda[1]);
	float a = (float)(vda[2]);

	float x = (-v/a);
	float y = sqrt(v*v-2*a*d*-1)/a; //Calculating time to intersection
	return x + y;
}
int getNumCars(){
	return rand() % 20 + 5;
}
void set_Randoms(int vda[VARS]){
	vda[0] = (rand() % 25 ) + 25;// puts random velocities in 25-49
	vda[1] =(rand() % 500 ) + 200;// Puts random distances in 200 - 699
	vda[2] = (rand() % 5) + 5;//Puts random Accelerations 5 - 9
	vda[3] = rand() % 4;
}
void printGroups(){
	int i, j;
	for(i = 0; i < DIR; i++){
		for(j = 0; j < groups[i].NumCars; j++){
			printf("Car %d: V = %d\tD = %d\tA = %d\tTime = %.2f\tDirection = %s\n", j + 1, groups[i].data[j][0], groups[i].data[j][1], groups[i].data[j][2], groups[i].time[j],  directionNames[groups[i].data[j][3]]);
		}
		printf("\n");
	}
}
void QsortRec(int i, int first, int last){
	if(first >= last) return;
	
	int pivotPos = partition(groups[i].time, groups[i].data, first, last, groups[i].NumCars);
	QsortRec(i, first, pivotPos - 1);
	QsortRec(i, pivotPos + 1, last);
}
int partition(float arr[], int *data[VARS], int first, int last, int size){
	float pivotVal = arr[last];
	int i = first - 1, j = last;
	
	for(int j = first; j <= last - 1; j++){
		
		if(arr[j] < pivotVal){
			i++;
			swap(&arr[i], &arr[j], data[i], data[j], size);			
		}
	}
	if(size != 1)
		swap(&arr[i + 1], &arr[last], data[i + 1], data[last], size);
	
	return i+1;
}
void swap(float *a, float *b, int c[], int d[], int size){
	int i;
	float temp = *a;
	*a = *b;
	*b = temp;
	for(i = 0; i < size; i++){
		int temp = c[i];
		c[i] = d[i];
		d[i] = temp;
	}
}
void intializeGroups(int NumCars){
	int i, j;
	for(i = 0; i < DIR; i++){
		groups[i].time = (float *)malloc(sizeof(float) * NumCars);
		groups[i].data = (int **)malloc(NumCars * sizeof(int *));
		for(j = 0; j < NumCars; j++)
			groups[i].data[j] = (int *)malloc(VARS * sizeof(int)); 
		groups[i].NumCars = NumCars;
	}
}
