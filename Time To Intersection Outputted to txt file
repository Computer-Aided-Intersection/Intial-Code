#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <string.h>

#ifdef WINDOWS
#include <direct.h>
#define GetCurrentDir _getcwd  //This is needed for outputting to a txt file
#else
#include <unistd.h>
#define GetCurrentDir getcwd
#endif
 
#define VARS 3

void QsortRec(float arr[], int first, int last);
int partition(float arr[], int first, int last);
void swap(float *a, float *b);
void printArray(float arr[]);
int Num_Cars();
void calculate_Time(float time[], int vda[][VARS], int size);
void set_Randoms(int vda[][VARS], int size);
void OutputToTxt(float times[]);

int main(int argc, char *argv[]){ 

	int i, n = 100; 
	float Car_Times[Num_Cars()];
	float times[n];// 1d array 
	int vda[n][VARS];
	
	srand(time(0));
	for(i = 0; i < Num_Cars(); i++){
		set_Randoms(vda, n);
		calculate_Time(times, vda, n); 
		QsortRec(times, 0, sizeof(times)/sizeof(times[0]) - 1);
		Car_Times[i] = times[0];
	}
	OutputToTxt(Car_Times);
}
void calculate_Time(float time[], int vda[][VARS], int  size){
	int i;
	for(i = 0; i < size; i++){
		float v = (float)(vda[i][0]);
		float d = (float)(vda[i][1]);
		float a = (float)(vda[i][2]);

		float x = (-v/a);
		float y = sqrt(v*v-2*a*d*-1)/a; //Calculating time to intersection
		time[i] = x + y;
	}
}
void set_Randoms(int vda[][VARS], int size){
	int i, j;
	for(i = 0; i < size; i++){
		for (j = 0; j < VARS; j++){
			if(j % 3 == 0)
				vda[i][j] = ((rand() % 25 ) + 25);// puts random velocities in 25-49
			else if(j % 3 == 1)
				vda[i][j] =((rand() % 500 ) + 200);// Puts random distances in 200 - 699
			else
				vda[i][j] = rand()%5 + 5;//Puts random Accelerations 5 - 9
		}
	}
}
int Num_Cars(){
	return 100;
}
void QsortRec(float arr[], int first, int last){
	if(first >= last) return;
	
	int pivotPos = partition(arr, first, last);
	QsortRec(arr, first, pivotPos-1);
	QsortRec(arr, pivotPos + 1, last);
}
int partition(float arr[], int first, int last){
	float pivotVal = arr[last];
	int i = first - 1, j = last;
	
	for(int j = first; j <= last - 1; j++){
		
		if(arr[j] < pivotVal){
			i++;
			swap(&arr[i], &arr[j]);
		}
	}
	swap(&arr[i + 1], &arr[last]);
	
	return i+1;
}
void swap(float *a, float *b){
	float temp = *a;
	*a = *b;
	*b = temp;
}
void printArray(float arr[]){
	int i;
	printf("\n");
	for(i = 0; i < 10; i++){
		printf("%f, ", arr[i]);
	}
	printf("\n");
}
void OutputToTxt(float times[]){
	int i;
	char buff[FILENAME_MAX];
	GetCurrentDir(buff, FILENAME_MAX);
	strcat(buff, "/CarTimes.txt");
	FILE * fp; 
	fp = fopen (buff,"w");
	for(i = 0; i < Num_Cars(); i++){
		fprintf(fp, "Car %d Time = %.5f\n",i, times[i]);
	}
	fclose (fp);	
}
