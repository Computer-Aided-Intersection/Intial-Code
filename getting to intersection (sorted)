#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

void QsortRec(float arr[], int first, int last);
int partition(float arr[], int first, int last);
void swap(float *a, float *b);
void printArray(float arr[]);
int Num_Cars();

int main(int argc, char *argv[]){ 

	int i, j, k;
	float x ,y;
	srand(time(0));
	
	int n = 100;
	int cars = Num_Cars();
	float Car_Times[cars];
	float time[n];// 1d array 
	int vda[n][3];// allocates space easy way
	for(k = 0; k < Num_Cars(); k++){
		for(i = 0; i < n; i++){
			for (j = 0; j < 3; j++){

				if(j % 3 == 0)
					vda[i][j] = ((rand() % 25 ) + 25);// puts random variables in to arraty
				else if(j % 3 == 1)
					vda[i][j] =((rand() % 500 ) + 200);
				else
					vda[i][j] = rand()%5 + 5;
			}
		}

		for(i = 0; i < n; i++){

			float v = (float)(vda[i][0]);
			float d = (float)(vda[i][1]);
			float a = (float)(vda[i][2]);

			float x = (-v/a);
			float y = sqrt(v*v-2*a*d*-1)/a; //Calculating time to intersection
			time [i] = x + y; 

		}
		QsortRec(time, 0, sizeof(time)/sizeof(time[0]) - 1);
		Car_Times[k] = time[0];
	}
	for(i = 0; i < Num_Cars(); i++){
		printf("Car %d Time = %.5f\n",i,Car_Times[i]);
	}
		
}
int Num_Cars(){
	return 4;
}
void QsortRec(float arr[], int first, int last){
	
	if(first >= last) return;
	
	int pivotPos = partition(arr, first, last);
	QsortRec(arr, first, pivotPos-1);
	QsortRec(arr, pivotPos + 1, last);
	
}

int partition(float arr[], int first, int last){
	
	float pivotVal = arr[last];
	int i = first - 1, j = last;
	
	for(int j = first; j <= last - 1; j++){
		
		if(arr[j] < pivotVal){
			i++;
			swap(&arr[i], &arr[j]);
		}
	}
	swap(&arr[i + 1], &arr[last]);
	
	return i+1;
}

void swap(float *a, float *b){
	
	float temp = *a;
	*a = *b;
	*b = temp;
	
}

void printArray(float arr[]){
	int i;
	printf("\n");
	for(i = 0; i < 10; i++){
		printf("%f, ", arr[i]);
	}
	printf("\n");
}
